version: "3.9"

#x-airflow-common:
#  &airflow-common
#  image: apache/airflow:2.1.3-python3.8
#  environment:
#    &airflow-common-env
#    AIRFLOW__CORE__EXECUTOR: LocalExecutor
#    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://data:data@af_db/airflow
#    AIRFLOW__CORE__FERNET_KEY: ''
#    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
#    AIRFLOW__CORE__LOAD_EXAMPLES: 'true'
#    AIRFLOW__SCHEDULER__MIN_FILE_PROCESS_INTERVAL: 10
#  volumes:
#    - ./airflow/dags:/opt/airflow/dags
#    - ./airflow/logs:/opt/airflow/logs
#    - ./airflow/plugins:/opt/airflow/plugins
#  user: "${AIRFLOW_UID:-1000}:${AIRFLOW_GID:-0}"
#  depends_on:
#    af_db:
#      condition: service_healthy

services:

  maxter_db:
    container_name: maxter_db
    image: postgres
    environment:
      POSTGRES_USER: data
      POSTGRES_PASSWORD: data
      POSTGRES_DB: ny_taxis
    volumes:
      - ./database/db-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - pipeline-network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "ny_taxis"]
      interval: 5s
      retries: 5
    restart: always

  af_db:
    container_name: af_db
    image: postgres
    environment:
      POSTGRES_USER: data
      POSTGRES_PASSWORD: data
      POSTGRES_DB: airflow
    volumes:
      - ./database/af-db-data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - pipeline-network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    restart: always

  pgadmin:
    container_name: pg
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: data@data.com
      PGADMIN_DEFAULT_PASSWORD: data
    ports:
      - "5001:80"
    depends_on:
      - maxter_db
#      - af_db
    networks:
      - pipeline-network

#  python:
#    build:
#      context: .
#      dockerfile: Dockerfile
#    ports:
#      - "5000:5000"
#    depends_on:
#      - maxter_db
#    networks:
#      - pipeline-network
#
  elasticsearch:
    container_name: es1
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.4
    restart: always
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
#      - ES_JAVA_OPTS="-Xms1g -Xmx1g"
    volumes:
      - es-data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - pipeline-network

  kibana:
    container_name: kb1
    image: docker.elastic.co/kibana/kibana:8.10.4
    restart: always
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_URL: http://es1:9200
      ELASTICSEARCH_HOSTS: http://es1:9200
#      ELASTICSEARCH_USERNAME: "data"
#      ELASTICSEARCH_PASSWORD: "data"

    depends_on:
      - elasticsearch
    networks:
      - pipeline-network

#  airflow-webserver:
#    <<: *airflow-common
#    command: webserver
#    container_name: airflow_webserver
#    ports:
#      - "8080:8080"
#    networks:
#      - pipeline-network
#    healthcheck:
#      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
#      interval: 10s
#      timeout: 10s
#      retries: 5
#    restart: always
#
#  airflow-scheduler:
#    <<: *airflow-common
#    command: scheduler
#    container_name: airflow_scheduler
#    environment:
#      <<: *airflow-common-env
#    restart: always
#    networks:
#      - pipeline-network
#
#  airflow-init:
#    <<: *airflow-common
#    command: version
#    container_name: airflow_init
#    environment:
#      <<: *airflow-common-env
#      _AIRFLOW_DB_UPGRADE: 'true'
#      _AIRFLOW_WWW_USER_CREATE: 'true'
#      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-data}
#      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-data}
#    networks:
#      - pipeline-network

networks:
  pipeline-network:

volumes:
  db-data:
    driver: local
  es-data:
    driver: local
  dags:
    driver: local
  af-db-data:
    driver: local
